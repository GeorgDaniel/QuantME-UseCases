version: '3'

volumes:
  exec_data:

services:
  ### Workflow Modeler ###
  workflow-modeler:
    image: planqk/workflow-modeler:latest
    environment:
     CAMUNDA_ENDPOINT: http://$PUBLIC_HOSTNAME:8090/engine-rest
     ENABLE_DATA_FLOW_PLUGIN: 'false'
     ENABLE_PLANQK_PLUGIN: 'false'
     ENABLE_QHANA_PLUGIN: 'false'
     ENABLE_QUANTME_PLUGIN: 'true'
     QRM_USERNAME: ${GITHUB_USER}
     QRM_REPONAME: ${QRM_REPONAME}
     QRM_REPOPATH: ${QRM_REPOPATH}
     OPENTOSCA_ENDPOINT: http://$PUBLIC_HOSTNAME:1337/csars
     WINERY_ENDPOINT: http://$PUBLIC_HOSTNAME:8093/winery
    ports:
      - 8080:8080
    networks:
      - workflow-observability

  ### Camunda Engine ###
  camunda-engine:
    image: camunda/camunda-bpm-platform:run-7.19.0
    ports:
      - 8090:8080
    networks:
      - workflow-observability

  #######################
  ### OpenTOSCA Ecosystem ###
  container:
    image: opentosca/container:v3.0.0
    ports:
      - '1337:1337'
      - '8081-8087:8081-8087'
    environment:
      CONTAINER_HOSTNAME: $PUBLIC_HOSTNAME
      ENGINE_IA_HOSTNAME: engine-ia
      ENGINE_IA_PORT: 8080
      ENGINE_PLAN_BPEL_HOSTNAME: engine-plan
      CONTAINER_DEPLOYMENT_TESTS: 'false'
    networks:
      - workflow-observability
  engine-plan:
    image: opentosca/ode:v2.4.0
    networks:
      - workflow-observability
  engine-ia:
    image: opentosca/engine-ia:v2.1.0
    networks:
      - workflow-observability
  winery:
    build: initialized-winery
    logging:
      driver: none
    ports:
      - '8093:8080'
    environment:
      WINERY_HOSTNAME: $PUBLIC_HOSTNAME
      WORKFLOWMODELER_HOSTNAME: $PUBLIC_HOSTNAME
      TOPOLOGYMODELER_HOSTNAME: $PUBLIC_HOSTNAME
      CONTAINER_HOSTNAME: $PUBLIC_HOSTNAME
    networks:
      - workflow-observability
  dind:
    image: docker:20.10-dind
    privileged: true
    environment:
      - DOCKER_TLS_CERTDIR=
    ports:
      - '2222:2375'
      - '9990-9999:9990-9999'
      - '9990-9999:9990-9999/udp'
    networks:
      - workflow-observability
  # end of OpenTOSCA Ecosystem
  #######################

  #######################
  ### QProv ###
  db:
    build: initialized-db
    logging:
      driver: none
    environment:
      POSTGRES_USERS: 'qprov:qprov|nisq:nisq'
      POSTGRES_DATABASES: 'qprov:qprov|nisq:nisq'
    networks:
      - workflow-observability
  qprov:
    image: planqk/qprov:v1.2.0
    logging:
      driver: none
    environment:
      POSTGRES_HOSTNAME: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: qprov
      POSTGRES_PASSWORD: qprov
      POSTGRES_DB: qprov
    ports:
      - "8094:8080"
    networks:
      - workflow-observability
  qprov-collector-ibm:
    image: planqk/qprov-collector:v1.2.0
    logging:
      driver: none
    environment:
      POSTGRES_HOSTNAME: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: qprov
      POSTGRES_PASSWORD: qprov
      POSTGRES_DB: qprov
      QPROV_IBMQ_TOKEN: ${IBM_ACCESS_TOKEN}
      QPROV_IBMQ_EXECUTE_CIRCUITS: 'false'
      QPROV_IBMQ_AUTO_COLLECT: 'true'
      QPROV_IBMQ_AUTO_COLLECT_INTERVAL: 60
      QPROV_IBMQ_AUTO_COLLECT_INTERVAL_CIRCUITS: 180
    networks:
      - workflow-observability
  # end of QProv
  #######################

  #######################
  ### NISQ Analyzer ###
  nisq-analyzer:
    image: planqk/nisq-analyzer:v1.4.0
    ports:
      - 8099:8080
    environment:
      POSTGRES_HOSTNAME: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: nisq
      POSTGRES_PASSWORD: nisq
      POSTGRES_DB: nisq
      SPRING_PROFILES_ACTIVE: docker
      QPROV_HOSTNAME: qprov
      QPROV_PORT: 8080
      TRANSLATOR_HOSTNAME: quantum-transpiler
      TRANSLATOR_PORT: 5000
      QISKIT_HOSTNAME: qiskit-service
      QISKIT_PORT: 5000
    networks:
     - workflow-observability
  quantum-transpiler:
    image: planqk/quantum-transpiler-backend:v1.0.2
    networks:
     - workflow-observability
  redis:
    image: planqk/redis:v1.0.0
    networks:
      - workflow-observability
  qiskit-service:
    image: planqk/qiskit-service:v1.4.0
    command: sh /app/startup.sh
    ports:
      - "5013:5013"
    environment:
      - REDIS_URL=redis://redis:5040
      - DATABASE_URL=sqlite:////data/app.db
    volumes:
      - exec_data:/data
    networks:
      - workflow-observability
  qiskit-rq-worker:
    image: planqk/qiskit-service:v1.4.0
    command: rq worker --url redis://redis:5040 qiskit-service_execute
    environment:
      - REDIS_URL=redis://redis:5040
      - DATABASE_URL=sqlite:////data/app.db
    volumes:
      - exec_data:/data
    depends_on:
      - redis
    deploy:
      replicas: 2
    networks:
      - workflow-observability
  # end of NISQ Analyzer
  #######################

networks:
  workflow-observability:
    driver: bridge

